name: CI - Iris FastAPI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  ECR_REPOSITORY: iris-model
  IMAGE_TAG: latest

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Config AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1  

    - name: Build Docker image
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

    - name: Tag Docker image
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Deploy to EC2
      env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
          echo "$EC2_KEY" > ec2_key.pem
          chmod 400 ec2_key.pem

          echo "Connecting to EC2 and deploying..."
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            set -e
            echo "Pulling latest Docker image from ECR..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            echo "Stopping and removing old container..."
            docker stop iris-app || true
            docker rm iris-app || true

            echo "Running latest container..."
            docker run -d --name iris-app -p 80:80 ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          EOF

      
    # - name: Set up Python
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.10'

    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install -r requirements.txt
    #     pip install flake8

    # - name: Run flake8 (code linting)
    #   run: |
    #     flake8 src --max-line-length=160 --exclude=__init__.py

    # - name: Build Docker image
    #   run: |
    #     docker build -t iris-fastapi-app .

    - name: Run tests (optional - placeholder)
      run: echo "All tests passed (placeholder)"